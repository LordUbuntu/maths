Jacobus Burger 2024-08-01
Deliniations are arbitrary and inconsistent/inaccurate. Be it a personal library or ideas or people, you can't neatly fit things into a box.
Instead of having a single file to contain an entire class of concepts math concepts (like "discrete") I've instead chosen to have each specific mathematical thing be their own file (lerp for Linear intERPolation, kaprekar for Kaprekar Constant, and collatz for Collatz Conjecture for example). This means each file is it's own individual mathematical concept with its related information, creating a sort of zettelkasten of mathematical code snippets.
Jacobus Burger 2024-08-01
For validation and provability of the correctness of equations, provers, type checking, and property-based testing will be used.
In the case of Python, that will be down with:
  - mypy (type checking)
  - pytest + hypothesis (property-based testing)
    - https://fsharpforfunandprofit.com/posts/property-based-testing-2/

This approach is working fantastically so far!

I need to do more research on hypthesis and property based testing.
And I should focus on writing the code first instead of worrying about tests, since that adds more friction and difficulty to the process.
Is there a way to test against logical constraints? How would I test theory and outcome with proovers like Coq or LEAN?


I think the best choice is to start with just writing the algorithms and bothering with testing after that. The testing can get tedious.


2025-02-16
It might be best to not over-engineer each file with proofs and other tests and stuff like that. Instead, I should keep it simple to implement and show. I'll keep docstrings and mypy type declarations, but I'll keep tests seperate or not have them at all.
There must be a simpler and better way to verify and prove the validity of a program than to write tests like hypothesis for them...
Still, the Curry-Howard correspondance and Programming By Proof are very alluring concepts for a repository about mathematical programs.
I think I should keep the programs themselves simple and free of noise and imports and dependencies. I would like to include verificaiton later somehow though.
