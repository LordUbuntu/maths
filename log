Jacobus Burger 2024-08-01
Deliniations are arbitrary and inconsistent/inaccurate. Be it a personal library or ideas or people, you can't neatly fit things into a box.
Instead of having a single file to contain an entire class of concepts math concepts (like "discrete") I've instead chosen to have each specific mathematical thing be their own file (lerp for Linear intERPolation, kaprekar for Kaprekar Constant, and collatz for Collatz Conjecture for example). This means each file is it's own individual mathematical concept with its related information, creating a sort of zettelkasten of mathematical code snippets.
Jacobus Burger 2024-08-01
For validation and provability of the correctness of equations, provers, type checking, and property-based testing will be used.
In the case of Python, that will be down with:
  - mypy (type checking)
  - pytest + hypothesis (property-based testing)
    - https://fsharpforfunandprofit.com/posts/property-based-testing-2/

This approach is working fantastically so far!

I need to do more research on hypthesis and property based testing.
And I should focus on writing the code first instead of worrying about tests, since that adds more friction and difficulty to the process.
Is there a way to test against logical constraints? How would I test theory and outcome with proovers like Coq or LEAN?


I think the best choice is to start with just writing the algorithms and bothering with testing after that. The testing can get tedious.


2025-02-16
It might be best to not over-engineer each file with proofs and other tests and stuff like that. Instead, I should keep it simple to implement and show. I'll keep docstrings and mypy type declarations, but I'll keep tests seperate or not have them at all.
There must be a simpler and better way to verify and prove the validity of a program than to write tests like hypothesis for them...
Still, the Curry-Howard correspondance and Programming By Proof are very alluring concepts for a repository about mathematical programs.
I think I should keep the programs themselves simple and free of noise and imports and dependencies. I would like to include verificaiton later somehow though.
A close one I've decided to use is deal (https://github.com/life4/deal), by using the command `python -m deal prove <file>` I can run a formal verification on the file and it might catch out bugs in the mathematics of the particular file.



2025-04-11
Need to figure out how exactly to write and automate tests for these on github and elsewhere.
I should also take inspiration from that group-theory repo I contributed to and consider using dataclasses or other approaches to organize the code better. Right now each module/file is a container for one function. That's fine for many applications, but for larger systems like Category theory, Topology theory, Geometry, Algebra, Group theory, among others, that can be a bit too fine.
In general, I should group things together only when they're truly related in that way and it makes sense to. Premature optimization is a road to great sorrows.



2025-04-24
Decided to reorganize file structure. Need to figure out how to get
  module imports for tests and other stuff working out...
FIGURED OUT TESTS. Install in editable mode, or more easily, run tests
  like "PYTHONPATH=maths pytest" at the root of the project!

2025-04-26
Utilizing hypothesis for property-based testing and deal for design
  by contract development. Together these approaches ensure decently
  rigorous and verifiable software. More approaches in the future will
  be added as discovered for a high standard of verifiability and
  provability in this mathematics library.

2025-04-28
It is truly infuriating that Python needs so many configuration files
  in a project directory. It's so frustrating to have all of this and
  disagreements about how best to do it istead of a straight-forwards
  and simple approach.

2025-05-04
Researching ways to make this library more robust.
So far
- mypy for static type checking
- hypothesis for property based testing
- deal for design-by-contract assurances
But still unsure how to validate time and memory limitations in the
  code with tests. I found memray which looks promising for memory
  profiling and can be implemented as a limit with pytest. Mostly
  profilers will just be used to report the performance of tests
  to spot out anomalies. Limits may be set such as a timeout for
  tests longer that 10s for example. But overall deal and hypothesis
  will be the main bed for testing, and then memory and time profilers
  will simply report performances (with some exceptions).
The goal is to automate testing and ensure a high quality, robustness,
  correctness, verifiability to the math programs implemented in this
  library.
!!! I think the goal of this project is to learn Python 3 development
  best practices, and to make a collection of well-tested and useful
  mathematical functions and algorithms. !!!


2025-05-06
Notably nearly every function is pure and thus parallelizable,
  meaning we can use pytest-xdist to run tests much faster with
  the `pytest -n <number of threads>` command! So in total, to
  run tests run `PYTHONPATH=maths pytest -n <number of threads> tests`


2025-05-09
I should completely add a pyproject.toml and add more tooling to make
  a better system. deal and hypothesis to do design-by-contract and
  property-based testing respectively, run by pytest. I should add
  formatters, linters, and profilers. And automate it all with
  pre-commit and other CICD pieces and pipelines! So that the process
  of building, verification, and so much more is as automated and
  reliable as possible!
Discovered CrossHair which may add an additional layer of proof and
  verification on top of hypothesis and deal! I should implement
  CrossHair next and hurry to get the whole workflow set up before
  Saturday!


2025-05-16
pyproject is added. Deal and Hypothesis are quite sufficient on their own for
  the moment. Formatters, linters, and profilers should still be added.
  Memray seems like a good one. I'll start with formatter and linters like
  black, ruff, etc


2025-05-17
Pyenv, Poetry, Tox, uv, oh my! There's so many tools in the Python ecosystem I'm still discovering! I'll need to figure out which to use together. So so many tools...
I've chosen to start with Flake8 and black. I'll switch to ruff
  etc. later.
I'll need to add profilers, linters, formatters, debuggers, and more.


2025-05-18
Need to figure out a better way to run hypothesis strategies for such complex
  and recursive types as the kind hamming distance operates on (from strings
  to high dimensional tensors, anything two things that are iterable, have
  the same length, and can have their values be compared). Something so
  comprehensive is difficult to count for and be robust against, but
  it should be possible to start on a smaller scale first!


2025-05-19
Between the option of installing flake8, black, and about a dozen flake8
  plugins, or installing ruff and getting all of that along with
  better performance and more, the choice was quite obvious. This is
  a new project, it doesn't have to use old tools and approaches, i
  can be bleeding edge!
So i've decided to research ruff and its use in the project. I may still
  end up using flake8, black, and the dozens of flake8 plugins anyways
  since ruff seems to require the plugins still (unless it doesn't).
